<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bigpigeon</title>
    <description>bigpigeon的博客</description>
    <link>http://bigpigeon.github.io/</link>
    <atom:link href="http://bigpigeon.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 17 Mar 2016 06:09:43 +0800</pubDate>
    <lastBuildDate>Thu, 17 Mar 2016 06:09:43 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>postgresql类型</title>
        <description>&lt;blockquote&gt;
&lt;p&gt;postgresql支持的类型相当的多,配合postgresql的函数就已经可以满足很多业务的需求了&lt;/p&gt;

&lt;p&gt;但是繁多的类型也导致了postgresql的学习成本和复杂度的问题&lt;/p&gt;

&lt;p&gt;这里我来做个笔记简单讲讲postgresql的数据类型有哪些和如何用好这些类型&lt;/p&gt;

&lt;p&gt;PS:以下内容都基于postgresql 9.3&lt;/p&gt;

&lt;p&gt;TODO:有些类型的例子和介绍还没写完，以后再补上&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;基本类型&quot;&gt;基本类型&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名字&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;尺寸&lt;/th&gt;
&lt;th style=&quot;text-align: right&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;smallint&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;2bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;小范围的整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;4bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;典型整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bigint&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;8bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;大范围的整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;decimal&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;可变&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;用户指定空间,精确分数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;numeric&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;可变&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;用户指定空间的精确分数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;real&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;4bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;不精确浮点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double-precision&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;8bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;不精确浮点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;smallserial&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;2bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;小范围自增整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;serial&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;4bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;普通范围自增整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bigserial&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;8bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;大范围自增整数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;金融类型&quot;&gt;金融类型&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名字&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;尺寸&lt;/th&gt;
&lt;th style=&quot;text-align: right&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;money&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;8bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;货币类型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;字符类型&quot;&gt;字符类型&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名字&lt;/th&gt;
&lt;th style=&quot;text-align: right&quot;&gt;尺寸&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;character varying(n), varchar(n)&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;限制内的可变长度类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;character(n), char(n)&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;固定长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;text&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;可变长度&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;二进制类型&quot;&gt;二进制类型&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名字&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;尺寸&lt;/th&gt;
&lt;th style=&quot;text-align: right&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;binary&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;1-4bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;可变长度的二进制字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;时间类型&quot;&gt;时间类型&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名字&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;尺寸&lt;/th&gt;
&lt;th style=&quot;text-align: right&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;timestamp[p] [ without time zone ]&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;8bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;包含时间和日期但没时区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;timestamp[p] with time zone&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;8bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;包含时间日期和时区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;date&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;4bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;日期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time [ without time zone ]&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;8bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;不包括日期的时间，无时区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time with time zone&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;12bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;不包含日期的时间，有时区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;interval&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;16bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;时间区间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;布尔类型&quot;&gt;布尔类型&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名字&lt;/th&gt;
&lt;th style=&quot;text-align: right&quot;&gt;尺寸&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;1bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;枚举类型&quot;&gt;枚举类型&lt;/h3&gt;

&lt;p&gt;example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;CREATE TYPE mood AS ENUM (&#39;sad&#39;, &#39;ok&#39;, &#39;happy&#39;);
CREATE TABLE person (
    name text,
    current_mood mood
);
INSERT INTO person VALUES (&#39;Moe&#39;, &#39;happy&#39;);
SELECT * FROM person WHERE current_mood = &#39;happy&#39;;
 name | current_mood 
------+--------------
 Moe  | happy
(1 row)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;几何学图形类型&quot;&gt;几何学图形类型&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名字&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;尺寸&lt;/th&gt;
&lt;th style=&quot;text-align: right&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;point&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;16bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;平面坐标 (x, y)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;line&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;32bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;直线 ((x1,y1), (x2,y2))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lseg&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;32bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;线段 ((x1,y1), (x2,y2))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;box&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;32bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;一个方形盒子 ((x1,y1), (x2,y2))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;16+16n bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;闭合路径(类似于多边形) ((x1,y1),...)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;path&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;16+16n bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;开放路径 [(x1,y1),...]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;polygon&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;40+16n bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;多边形（类似于闭合路径） ((x1,y1),...)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;circle&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;24 bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;圆 &amp;lt;(x,y),r&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;网络地址类型&quot;&gt;网络地址类型&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名字&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;尺寸&lt;/th&gt;
&lt;th style=&quot;text-align: right&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cidr&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;7 or 19 bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;ipv4或ipv6网络&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inet&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;7 or 19 bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;ipv4或ipv6地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;macaddr&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;6bytes&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;MAC地址&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3 id=&quot;比特类型&quot;&gt;比特类型&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;只接受2进制数&lt;/li&gt;
&lt;li&gt;有2种模式 BIT(n) 和BIT VARYING(n)
官方例子:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;CREATE TABLE test (a BIT(3), b BIT VARYING(5));
INSERT INTO test VALUES (B&#39;101&#39;, B&#39;00&#39;);
INSERT INTO test VALUES (B&#39;10&#39;, B&#39;101&#39;);
ERROR:  bit string length 2 does not match type bit(3)
INSERT INTO test VALUES (B&#39;10&#39;::bit(3), B&#39;101&#39;);
SELECT * FROM test;
  a  |  b
-----+-----
 101 | 00
 100 | 101
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;文本查询类型&quot;&gt;文本查询类型&lt;/h3&gt;

&lt;p&gt;暂且跳过&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tsvector&lt;/li&gt;
&lt;li&gt;tsquery&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;uuid-类型&quot;&gt;UUID 类型&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;UUID 可用来作为唯一标识&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;xml-类型&quot;&gt;XML 类型&lt;/h3&gt;

&lt;p&gt;xml data是用来存储xml格式的数据的，用text领域来存xml数据，想要使用该数据类型需要在安装时 configure --with-libxml
- xml用text领域来存xml数据&lt;/p&gt;

&lt;h3 id=&quot;json格式&quot;&gt;json格式&lt;/h3&gt;

&lt;p&gt;json 也是用text来存储, 但json数据类型的好处在存储时会进行检测，保证每一个值都是一个有效的json值，它还能相对的支持一些函数
在用json时最好保证数据的编码和postgresql的一致&lt;/p&gt;

&lt;h3 id=&quot;数组类型&quot;&gt;数组类型&lt;/h3&gt;

&lt;p&gt;演示创建一个带数组类型的表:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;CREATE TABLE sal_emp (
    name            text,
    pay_by_quarter  integer[],
    schedule        text[][]
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;插入数据&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;INSERT INTO sal_emp
    VALUES (&#39;Bill&#39;,
    &#39;{10000, 10000, 10000, 10000}&#39;,
    &#39;\{\{&quot;meeting&quot;, &quot;lunch&quot;\}, \{&quot;training&quot;, &quot;presentation&quot;\}\}&#39;);

INSERT INTO sal_emp
    VALUES (&#39;Carol&#39;,
    &#39;{20000, 25000, 25000, 25000}&#39;,
    &#39;\{\{&quot;breakfast&quot;, &quot;consulting&quot;\}, {&quot;meeting&quot;, &quot;lunch&quot;\}\}&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查询数据&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;SELECT * FROM sal_emp;
 name  |      pay_by_quarter       |                 schedule
-------+---------------------------+-------------------------------------------
 Bill  | {10000,10000,10000,10000} | \{\{meeting,lunch\},\{training,presentation\}\}
 Carol | {20000,25000,25000,25000} | \{\{breakfast,consulting\},\{meeting,lunch\}\}
(2 rows)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多重数据的尺寸必须是相同的，一个错误的例子&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;INSERT INTO sal_emp
    VALUES (&#39;Bill&#39;,
    &#39;{10000, 10000, 10000, 10000}&#39;,
    &#39;\{\{&quot;meeting&quot;, &quot;lunch&quot;\}, \{&quot;meeting&quot;\}\}&#39;);
ERROR:  multidimensional arrays must have array expressions with matching dimensions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以使用 ARRAY构造语法&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;INSERT INTO sal_emp
    VALUES (&#39;Bill&#39;,
    ARRAY[10000, 10000, 10000, 10000],
    ARRAY[[&#39;meeting&#39;, &#39;lunch&#39;], [&#39;training&#39;, &#39;presentation&#39;]]);

INSERT INTO sal_emp
    VALUES (&#39;Carol&#39;,
    ARRAY[20000, 25000, 25000, 25000],
    ARRAY[[&#39;breakfast&#39;, &#39;consulting&#39;], [&#39;meeting&#39;, &#39;lunch&#39;]]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;查询语法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;查询pay_by_quarter的第一个值和第二个值不相等的条目的名字&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这里要注意 array的索是从1开始的
是从1开始的
从1开始的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;SELECT name FROM sal_emp WHERE pay_by_quarter[1] &amp;lt;&amp;gt; pay_by_quarter[2];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查询pay_by_quarter的第三个值&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;SELECT pay_by_quarter[3] FROM sal_emp;
 pay_by_quarter
----------------
          10000
          25000
(2 rows)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查询schedule的多个值&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这里注意postgresql的array中的切片和其他语言的也是不同的，它会返回[n:m]中的值并包括m的值
多重数组切片要全是切片不能[2][1:2]这种写法，而[1:2][2]这种写法会自动转成[1:2][1:2]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;SELECT schedule[1:2][1:1] FROM sal_emp WHERE name = &#39;Bill&#39;;
        schedule
-------------------------
 \{\{breakfast\},\{meeting\}\}
(1 row)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用postgresql的内置函数查看某条数据的数组的长度&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;SELECT array_dims(schedule) FROM sal_emp WHERE name = &#39;Carol&#39;;
 array_dims
------------
 [1:2][1:2]
(1 row)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以使用array_upper和array_lower查看数组索引的最大值和最小值&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;SELECT array_upper(schedule, 1) FROM sal_emp WHERE name = &#39;Carol&#39;;

 array_upper
-------------
           2
(1 row)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;array_length函数则是查看数组长度和上面那几类函数的使用方法一样&lt;/p&gt;

&lt;p&gt;array_prepend/array_append 在数组前/后面加入元素&lt;/p&gt;

&lt;p&gt;array_cat &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;|| 或修饰符 也能用于SELECT ，比如&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;SELECT pay_by_quarter[1:2] || pay_by_quarter[4],name FROM sal_emp
      ?column?       |   name
---------------------+----------
 {10000,10000,10000} | Bill
 {27000,27000,25000} | Carol
(2 rows)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;修改数组&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;语法和SELECT中的差不多，讲一个特殊点的&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;UPDATE sal_emp SET pay_by_quarter[1:2] = &#39;{27000,27000}&#39;
    WHERE name = &#39;Carol&#39;;
UPDATE 1
SELECT pay_by_quarter FROM sal_emp WHERE name = &#39;Carol&#39;;
      pay_by_quarter
---------------------------
 {27000,27000,25000,25000}
(1 row)


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;在数组中搜索
ANY 和 ALL 语法&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;//先加一条数据
INSERT INTO sal_emp VALUES(&#39;bigpigeo&#39;, ARRAY[10000,20000,30000,40000], ARRAY[[&#39;cookie&#39;, &#39;html&#39;, &#39;head&#39;], [&#39;jia&#39;, &#39;the&#39;, &#39;nine&#39;]]);
INSERT 0 1
SELECT * FROM sal_emp WHERE 10000 = ANY (pay_by_quarter);
   name   |      pay_by_quarter       |                 schedule
----------+---------------------------+------------------------------------------
 Bill     | {10000,10000,10000,10000} | \{\{breakfast,consulting},\{meeting,lunch\}\}
 bigpigeo | {10000,20000,30000,40000} | \{\{cookie,html,head\},\{jia,the,nine\}\}

SELECT * FROM sal_emp WHERE 10000 = ALL (pay_by_quarter);
 name |      pay_by_quarter       |                 schedule
------+---------------------------+------------------------------------------
 Bill | {10000,10000,10000,10000} | \{\{breakfast,consulting\},\{meeting,lunch\}\}
(1 row)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;组合类型(重点来了)&quot;&gt;组合类型(重点来了)&lt;/h3&gt;

&lt;p&gt;postgresql 还支持组合类型个人感觉这种比JSON类型好，因为JSON相当于是弱类型的数据，不能很好的对数据做类型检查，使用时容易出问题&lt;/p&gt;

&lt;p&gt;首先是创建复合类型&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;CREATE TYPE complex AS (
    r       double precision,
    i       double precision
);

CREATE TYPE inventory_item AS (
    name            text,
    supplier_id     integer,
    price           numeric
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后是包含复合类型的表&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;CREATE TABLE on_hand (
    item      inventory_item,
    count     integer
);

INSERT INTO on_hand VALUES (ROW(&#39;fuzzy dice&#39;, 42, 1.99), 1000);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;当你创建一个表的同时也会创建一个和表名一样的复合类型&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;写入复合类型表达式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有2种写入方式:&lt;/p&gt;

&lt;p&gt;&amp;#39;(val1, val2, ...)&amp;#39;&lt;/p&gt;

&lt;p&gt;或ROW语法&lt;/p&gt;

&lt;p&gt;ROW(val1, val2, ...)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;访问复合类型
访问复合类型的成员必须带括号&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;SELECT (item).name FROM on_hand WHERE (item).price &amp;gt; 9.99;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用函数访问也一样&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;SELECT (my_func(...)).field FROM ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;修改复合类型&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Insert一个复合类型&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;INSERT INTO on_hand (item) VALUES((&#39;fat pigeon&#39;, 43, 2.1));
INSERT 0 1
SELECT * FROM on_hand WHERE (item).name = &#39;fat pigeon&#39;;
         item          | count
-----------------------+-------
 (&quot;fat pigeon&quot;,43,2.1) |
(1 row)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Update一个复合类型&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;UPDATE on_hand SET item = ROW(&#39;fuzzy dice&#39;, 42, 2.99) WHERE (item).name = &#39;fuzzy dice&#39;;
UPDATE 1
SELECT * FROM on_hand WHERE (item).name = &#39;fuzzy dice&#39;;
          item          | count
------------------------+-------
 (&quot;fuzzy dice&quot;,42,2.99) |  1000
(1 row)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Update复合类型中子域的值&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;UPDATE on_hand SET item.price = 2.5 WHERE (item).name = &#39;fuzzy dice&#39;;
UPDATE 1
SELECT * FROM on_hand WHERE item.name = &#39;fuzzy dice&#39;;
                                    ^
postgres=# SELECT * FROM on_hand WHERE (item).name = &#39;fuzzy dice&#39;;
         item          | count
-----------------------+-------
 (&quot;fuzzy dice&quot;,42,2.5) |  1000
(1 row)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;range类型&quot;&gt;Range类型&lt;/h3&gt;

&lt;p&gt;range类型可以表示一个值的范围，比如tsrange 可以表示timestamp 的范围&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;以下是postgresSQL内置的range类型，你也可以&lt;a href=&quot;http://www.postgresql.org/docs/9.3/static/sql-createtype.html&quot;&gt;自定义&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名字&lt;/th&gt;
&lt;th style=&quot;text-align: right&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;int4range&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;表示整数的范围&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int8range&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;表示大整数的范围&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;numrange&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;表示numeric的范围&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tsrange&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;表示为没有时区的timestamp的范围&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tstzrange&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;表示为有时区的timestamp的范围&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;daterange&lt;/td&gt;
&lt;td style=&quot;text-align: right&quot;&gt;表示日期的范围&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;例子&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;@&amp;gt;和*的注解可以查&lt;a href=&quot;http://www.postgresql.org/docs/9.3/static/functions-range.html#RANGE-OPERATORS-TABLE&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;CREATE TABLE reservation (room int, during tsrange);
INSERT INTO reservation VALUES
    (1108, &#39;[2010-01-01 14:30, 2010-01-01 15:30)&#39;);


SELECT * FROM reservation WHERE during @&amp;gt; &#39;2010-01-01 14:50&#39;::timestamp;
 room |                    during
------+-----------------------------------------------
 1108 | [&quot;2010-01-01 14:30:00&quot;,&quot;2010-01-01 15:30:00&quot;)
(1 row)

--下面就是一些官方例子，自己也可以发挥想象力去尝试一下

-- Overlaps
SELECT numrange(11.1, 22.2) &amp;amp;&amp;amp; numrange(20.0, 30.0);

-- Extract the upper bound
SELECT upper(int8range(15, 25));

-- Compute the intersection
SELECT int4range(10, 20) * int4range(15, 25);

-- Is the range empty?
SELECT isempty(numrange(1, 5));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;** 构造一个range类型 **&lt;/p&gt;

&lt;p&gt;首先range类型有2种表示范围的符号&lt;/p&gt;

&lt;p&gt;[]表示包含范围符&lt;/p&gt;

&lt;p&gt;()表示不包含范围符&lt;/p&gt;

&lt;p&gt;然后是range类型也可其他类型一下可以字符串构造&lt;/p&gt;

&lt;p&gt;&amp;#39;SELECT &amp;#39;[3,7)&amp;#39;::int4range;&amp;#39;&lt;/p&gt;

&lt;p&gt;或者是构造函数构造&lt;/p&gt;

&lt;p&gt;SELECT numrange(1.0, 14.0, &amp;#39;(]&amp;#39;);&lt;/p&gt;
</description>
        <pubDate>Sun, 13 Mar 2016 18:30:00 +0800</pubDate>
        <link>http://bigpigeon.github.io/2016/03/13/postgresqltype/</link>
        <guid isPermaLink="true">http://bigpigeon.github.io/2016/03/13/postgresqltype/</guid>
        
        
        <category>笔记</category>
        
      </item>
    
      <item>
        <title>如何在python上使用postgresql</title>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本文使用的是postgresql 9.3 基于docker ubuntu&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;首先postgresql的安装,这里我使用了自己build一个Dockerfile&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我的Dockerfile:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;FROM ubuntu:latest
MAINTAINER bigpigeon &amp;lt;3283273530@qq.com&amp;gt;

RUN apt-get -yqq update
RUN apt-get install -y postgresql-9.3

USER postgres 
RUN touch /var/lib/postgresql/.psql_history 
RUN /etc/init.d/postgresql start &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    psql --command &lt;span class=&quot;s2&quot;&gt;&quot;ALTER USER postgres WITH SUPERUSER PASSWORD &#39;123456&#39;;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    createdb -O postgres postgres
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;host all  all    0.0.0.0/0  md5&quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/postgresql/9.3/main/pg_hba.conf
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;listen_addresses=&#39;*&#39;&quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/postgresql/9.3/main/postgresql.conf

VOLUME  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/postgresql&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/var/log/postgresql&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/var/lib/postgresql&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/lib/postgresql/9.3/bin/postgres&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;-D&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/var/lib/postgresql/9.3/main&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;-c&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;config_file=/etc/postgresql/9.3/main/postgresql.conf&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

EXPOSE 5432
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;因为postgresql不能用root启动，所以我们要改用postgres帐户，该帐户是在postgresql安装时自动创建的&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;build docker&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker build -t postgres:own .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;跑一个docker 进程&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run --name postgres -d -p 15432:5432 postgres:own 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;进入该进程&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -i -t postgres /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;之后来查看一下postgres启动的进程和端口&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;//在docker中比较环境干净，所以没必要用grep筛选
&lt;span class=&quot;c&quot;&gt;# ps aux&lt;/span&gt;
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
postgres     1  0.0  2.0 244920 20576 ?        Ss   06:05   0:00 /usr/lib/postgresql/9.3/bin/postgres -D /var/lib/pos
postgres     9  0.0  0.3 244920  3456 ?        Ss   06:05   0:00 postgres: checkpointer process
postgres    10  0.0  0.4 244920  4608 ?        Ss   06:05   0:00 postgres: writer process
postgres    11  0.0  0.3 244920  3456 ?        Ss   06:05   0:00 postgres: wal writer process
postgres    12  0.0  0.5 245672  5904 ?        Ss   06:05   0:00 postgres: autovacuum launcher process
postgres    13  0.0  0.3 100596  3396 ?        Ss   06:05   0:00 postgres: stats collector process
postgres    14  0.0  0.3  18228  3228 ?        Ss   06:09   0:00 /bin/bash
postgres    22  0.0  0.2  15572  2084 ?        R+   06:14   0:00 ps aux
&lt;span class=&quot;c&quot;&gt;# netstat -an&lt;/span&gt;
Active Internet connections &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;servers and established&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Proto Recv-Q Send-Q Local Address           Foreign Address         State
tcp        0      0 127.0.0.1:5432          0.0.0.0:&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;               LISTEN
tcp6       0      0 ::1:5432                :::&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;                    LISTEN
udp6       0      0 ::1:59218               ::1:59218               ESTABLISHED
Active UNIX domain sockets &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;servers and established&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Proto RefCnt Flags       Type       State         I-Node   Path
unix  2      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ACC &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;     STREAM     LISTENING     26950    /var/run/postgresql/.s.PGSQL.5432
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;连接控制台&quot;&gt;连接控制台&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;用psql来连接postgresql服务端(记得第一时间改密码)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;psql -U postgres -h 127.0.0.1 -p 15432
&lt;span class=&quot;gp&quot;&gt;=# &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\p&lt;/span&gt;assword postgres
&lt;span class=&quot;gp&quot;&gt;=# &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\q&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;-U 指定登录用户 -d 指定数据库 -h -p 指定登录的主机和端口，更详细的参数可用--help查询&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;通过postgresql控制台创建用户&quot;&gt;通过postgresql控制台创建用户&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;psql -U postgres -h 127.0.0.1 -p 15432
&lt;span class=&quot;gp&quot;&gt;=# &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\p&lt;/span&gt;assword postgres
&lt;span class=&quot;gp&quot;&gt;=# &lt;/span&gt;CREATE USER dbuser WITH PASSWORD &lt;span class=&quot;s1&quot;&gt;&#39;password&#39;&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;=# &lt;/span&gt;CREATE DATABASE exampledb OWNER dbuser;
&lt;span class=&quot;gp&quot;&gt;=# &lt;/span&gt;GRANT ALL PRIVILEGES ON DATABASE exampledb to dbuser;
&lt;span class=&quot;gp&quot;&gt;=# &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\q&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;数据库命令&quot;&gt;数据库命令&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# psql -U dbuser -d exampledb -h 127.0.0.1 -p 15432&lt;/span&gt;
// &lt;span class=&quot;se&quot;&gt;\p&lt;/span&gt;assword &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;username]: 修改[某用户]密码,只有超级用户才可以改其他人的密码
&lt;span class=&quot;gp&quot;&gt;=&amp;gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\p&lt;/span&gt;assword
Enter new password:
Enter it again:

// &lt;span class=&quot;se&quot;&gt;\e&lt;/span&gt;ncoding &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ENCODING]: 显示[修改]客户端的编码
&lt;span class=&quot;gp&quot;&gt;=&amp;gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\e&lt;/span&gt;ncoding
UTF8

// &lt;span class=&quot;se&quot;&gt;\h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;NAME]: 查看 所有[某条] SQL命令的解释，比如&lt;span class=&quot;se&quot;&gt;\h&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;。
&lt;span class=&quot;gp&quot;&gt;=&amp;gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\h&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select
&lt;/span&gt;Command:     SELECT
Description: retrieve rows from a table or view
Syntax:
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; WITH &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; RECURSIVE &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; with_query &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;, ...] &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
...
// &lt;span class=&quot;se&quot;&gt;\l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PATTERN]: 列出所有[某条] 数据库
&lt;span class=&quot;gp&quot;&gt;=&amp;gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\l&lt;/span&gt;
                             List of databases
   Name    |  Owner   | Encoding  | Collate | Ctype |   Access privileges
-----------+----------+-----------+---------+-------+-----------------------
 exampledb | dbuser   | SQL_ASCII | C       | C     | &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Tc/dbuser           +
           |          |           |         |       | &lt;span class=&quot;nv&quot;&gt;dbuser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;CTc/dbuser
 postgres  | postgres | SQL_ASCII | C       | C     |
 template0 | postgres | SQL_ASCII | C       | C     | &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;c/postgres          +
           |          |           |         |       | &lt;span class=&quot;nv&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;CTc/postgres
 template1 | postgres | SQL_ASCII | C       | C     | &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;c/postgres          +
           |          |           |         |       | &lt;span class=&quot;nv&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;CTc/postgres
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4 rows&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

// &lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;database_name]：连接其他数据库。
&lt;span class=&quot;gp&quot;&gt;=&amp;gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt; postgres
SSL connection &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;cipher: DHE-RSA-AES256-GCM-SHA384, bits: 256&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
You are now connected to database &lt;span class=&quot;s2&quot;&gt;&quot;postgres&quot;&lt;/span&gt; as user &lt;span class=&quot;s2&quot;&gt;&quot;dbuser&quot;&lt;/span&gt;.

// &lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;table_name]：列出所有[某一张]表格的结构。
// 因为目前还没建表，所以只有一句告警
&lt;span class=&quot;gp&quot;&gt;=&amp;gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;
No relations found.
// &lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;u[+] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PATTERN]：列出所有[某]用户。
&lt;span class=&quot;gp&quot;&gt;=&amp;gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;u
                             List of roles
 Role name |                   Attributes                   | Member of
-----------+------------------------------------------------+-----------
 dbuser    |                                                | &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
 postgres  | Superuser, Create role, Create DB, Replication | &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

// &lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;onninfo：列出当前数据库和连接的信息。
&lt;span class=&quot;gp&quot;&gt;=&amp;gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;onninfo
You are connected to database &lt;span class=&quot;s2&quot;&gt;&quot;postgres&quot;&lt;/span&gt; as user &lt;span class=&quot;s2&quot;&gt;&quot;dbuser&quot;&lt;/span&gt; on host &lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt; at port &lt;span class=&quot;s2&quot;&gt;&quot;15432&quot;&lt;/span&gt;.
SSL connection &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;cipher: DHE-RSA-AES256-GCM-SHA384, bits: 256&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

// 更多命令可以通过&lt;span class=&quot;se&quot;&gt;\?&lt;/span&gt;查看
&lt;span class=&quot;gp&quot;&gt;=&amp;gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\?&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;数据库操作&quot;&gt;数据库操作&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;语法和mysql相似,可通过\h去查看&lt;/li&gt;
&lt;li&gt;下面我将操作数据库语法去建表，插数据等操作&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;=&amp;gt; &lt;/span&gt;CREATE TABLE user_person&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name VARCHAR&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;20&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, entry DATE&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
CREATE TABLE
&lt;span class=&quot;gp&quot;&gt;=&amp;gt; &lt;/span&gt;INSERT INTO user_person&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name, entry&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; VALUES&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;jia&#39;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&#39;2016-2-28&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
INSERT 0 1
&lt;span class=&quot;gp&quot;&gt;=&amp;gt; &lt;/span&gt;ALTER TABLE user_person ADD job VARCHAR&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
ALTER TABLE
&lt;span class=&quot;gp&quot;&gt;=&amp;gt; &lt;/span&gt;INSERT INTO user_person&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name, entry&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; VALUES&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;jib&#39;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&#39;2016-2-29&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
INSERT 0 1
&lt;span class=&quot;gp&quot;&gt;=&amp;gt; &lt;/span&gt;UPDATE user_person &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;job &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;backend develop&#39;&lt;/span&gt; WHERE name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;jia&#39;&lt;/span&gt;;
UPDATE 1
&lt;span class=&quot;gp&quot;&gt;=&amp;gt; &lt;/span&gt;UPDATE user_person &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;job &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;frontend develop&#39;&lt;/span&gt; WHERE name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;jib&#39;&lt;/span&gt;;
UPDATE 1
&lt;span class=&quot;gp&quot;&gt;=&amp;gt; &lt;/span&gt;ALTER TABLE user_person ALTER COLUMN job SET NOT NULL ;
ALTER TABLE
&lt;span class=&quot;gp&quot;&gt;=&amp;gt; &lt;/span&gt;INSERT INTO user_person&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name, entry&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; VALUES&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;jic&#39;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&#39;2016-3-1&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
ERROR:  null value &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;column &lt;span class=&quot;s2&quot;&gt;&quot;job&quot;&lt;/span&gt; violates not-null constraint
DETAIL:  Failing row contains &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;jic, 2016-03-01, null&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
&lt;span class=&quot;gp&quot;&gt;=&amp;gt; &lt;/span&gt;SELECT &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; FROM user_person;
 name |   entry    |       job
------+------------+------------------
 jia  | 2016-02-28 | backend develop
 jib  | 2016-02-29 | frontend develop
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2 rows&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;如何在python上操作postgresql&quot;&gt;如何在python上操作postgresql&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.postgresql.org/wiki/Python&quot;&gt;官网wiki&lt;/a&gt; 给出了6种python 版本的客户端&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我这里用的是&lt;a href=&quot;http://initd.org/psycopg/docs/&quot;&gt;Psycopg2&lt;/a&gt;因为它是这6个客户端中唯二使用LGPL许可证的，并且最近还有更新维护&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第一部分 安装&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ubuntu:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;只需要apt-get install python-psycopg2就ok&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;windows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;pip install psycopg2&lt;/p&gt;

&lt;p&gt;官网建议用easy_install 但这种安装方法在import是会提示缺少DLL&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;第二部分 操作数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;psycopg2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 连接数据库&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;psycopg2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;192.168.56.102&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;15432&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;passwd&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dbname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exampledb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dbuser&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 创建一个游标去执行数据库操作&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 插入一条数据到user_person表&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;INSERT INTO user_person(name, entry, job) VALUES (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;full-stack develop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 执行查询语句&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECT * FROM user_person;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 把查询的结果取出来&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;jia&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;backend develop&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;jib&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;frontend develop&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;jic&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;full-stack develop&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 确保所有命令执行完成&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 关闭游标和数据库连接&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;上面就是一次完整的数据库操作流程,这里有几点需要注意:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;execute的 VALUES 后面必须使用(%s,...)的格式&lt;/li&gt;
&lt;li&gt;VALUES后面的占位符支持 (%(name)s,...) 参数则为{&amp;#39;name&amp;#39;: value,...}这种格式,这样可以保证不用在输入重复的参数&lt;/li&gt;
&lt;li&gt;占位符必须是 %s，不能是%d 或%f&lt;/li&gt;
&lt;li&gt;参数的数据结构必须是list或tuple&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python类型和SQL类型对照
&lt;a href=&quot;http://initd.org/psycopg/docs/usage.html#adaptation-of-python-values-to-sql-types&quot;&gt;http://initd.org/psycopg/docs/usage.html#adaptation-of-python-values-to-sql-types&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 07 Mar 2016 18:30:00 +0800</pubDate>
        <link>http://bigpigeon.github.io/2016/03/07/postgresqldoc/</link>
        <guid isPermaLink="true">http://bigpigeon.github.io/2016/03/07/postgresqldoc/</guid>
        
        
        <category>笔记</category>
        
      </item>
    
      <item>
        <title>使用docker部署jekyll</title>
        <description>&lt;blockquote&gt;
&lt;p&gt;关于在docker部署jekyll在&lt;a href=&quot;http://books.linuxfocus.net/files/books/James.Turnbull.The.Docker.Book.Containerization.is.the.new.virtualization.B00LRROTI4.pdf&quot;&gt;The.Docker.Book&lt;/a&gt;中也有详细说明，但主要是自从jekyll升级到需要ruby2.0+版本后就没那么容易了&lt;/p&gt;

&lt;p&gt;所以我在这记录一下部署过程以免将来再次踩坑&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;首先，为什么要用docker&quot;&gt;首先，为什么要用docker&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;docker提供了基于操作系统的虚拟化技术，可以让你很方便的把应用的环境独立出来并且可以重用&lt;/p&gt;

&lt;p&gt;并且 docker提供了一套完善的工具去管理docker推出的进程&lt;/p&gt;

&lt;p&gt;所以 docker相当于是supervisor + 容器的组合&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;编辑jekyll的dockerfile和nginx的dockerfile&quot;&gt;编辑jekyll的Dockerfile和nginx的Dockerfile&lt;/h3&gt;

&lt;hr&gt;

&lt;h4 id=&quot;jekyll的目录结构&quot;&gt;jekyll的目录结构&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;|-base
    |-Dockerfile
|-create
    |-Dockerfile
|-push
    |-Dockerfile
    |-Rakefile
    |-key
       |-id_rsa
       |-id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;jekyll-base目录下的dockerfile&quot;&gt;jekyll base目录下的Dockerfile&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;FROM ubuntu:latest
MAINTAINER bigpigeon0 &amp;lt;bigpigeon0@gmail.com&amp;gt;
ENV REFRESHED_AT 2016-02-13

RUN apt-get -yqq update
RUN apt-get -yqq install ruby2.0 ruby2.0-dev ruby-dev make nodejs git

RUN &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1..100&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        gem2.0 install --source&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http://rubygems.org jekyll;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -eq 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;then &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;break&lt;/span&gt;;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;;
RUN gem2.0 install redcarpet
RUN gem2.0 install --source&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http://rubygems.org rake
RUN gem2.0 install bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;apt-get 增加了 ruby-dev(ruby某些库需要用到ruby-dev) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;gem2.0 使用源是http的rubugems.org(某些下载文件过大使用https会出现connection reset)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;耐性等待jekyll的安装非常非常慢可能需要1个小时，而且没提示(想要提示可以用Bundler(gem install bundler)，但不知道为何bundler经常装到一半失败，并且缓存失败。。。)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;总的来说就是ruby坑爹，gem更坑爹&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rake的作用是把jekyll生成的网页推到github的master分支上，因为github上的jekyll不支持插件，所以只能本地生产完推上去&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h4 id=&quot;jekyll-create目录下的dockerfile&quot;&gt;jekyll create目录下的Dockerfile&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;FROM bigpigeon0/jekyll:latest
MAINTAINER bigpigeon0 &amp;lt;bigpigeon0@gmail.com&amp;gt;

VOLUME [&quot;/data&quot;, &quot;/var/www/html&quot;]
WORKDIR /data

ENTRYPOINT [ &quot;jekyll&quot;, &quot;build&quot;, &quot;--destination=/var/www/html&quot; ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h4 id=&quot;jekyll-push目录下的dockerfile&quot;&gt;jekyll push目录下的Dockerfile&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;FROM bigpigeon0/jekyll:latest
MAINTAINER bigpigeon0 &amp;lt;bigpigeon0@gmail.com&amp;gt;

RUN mkdir -p /data/rakedata /data/blog
RUN git config --global user.email bigpigeon0@gmail.com
RUN git config --global user.name bigpigeon

ADD Rakefile /data/rakedata/
COPY key/    /root/.ssh/

WORKDIR /data/rakedata

ENTRYPOINT [&quot;rake&quot;, &quot;publish&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h4 id=&quot;jekyll-push目录下的rakefile&quot;&gt;jekyll push目录下的Rakefile&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;require &quot;rubygems&quot;
require &quot;tmpdir&quot;

require &quot;bundler/setup&quot;
require &quot;jekyll&quot;


# Change your GitHub reponame
GITHUB_REPONAME = &quot;bigpigeon/bigpigeon.github.io&quot;


desc &quot;Generate blog files&quot;
task :generate do
  Jekyll::Site.new(Jekyll.configuration({
    &quot;source&quot;      =&amp;gt; &quot;../blog/.&quot;,
    &quot;destination&quot; =&amp;gt; &quot;_site&quot;
  })).process
end


desc &quot;Generate and publish blog to master&quot;
task :publish =&amp;gt; [:generate] do
  Dir.mktmpdir do |tmp|
    cp_r &quot;_site/.&quot;, tmp

    pwd = Dir.pwd
    Dir.chdir tmp

    system &quot;git init&quot;
    system &quot;git add .&quot;
    message = &quot;Site updated at #{Time.now.utc}&quot;
    system &quot;git commit -m #{message.inspect}&quot;
    system &quot;git remote add origin git@github.com:#{GITHUB_REPONAME}.git&quot;
    system &quot;git push origin master --force&quot;

    Dir.chdir pwd
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h4 id=&quot;nginx-image的目录结构&quot;&gt;nginx image的目录结构&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;|-Dockerfile
|-nginx
    |-static.conf
    |-nginx.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h4 id=&quot;nginx-image的dockerfile&quot;&gt;nginx image的Dockerfile&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;FROM ubuntu:latest
MAINTAINER bigpigeon &amp;lt;bigpigeon0@gmail.com&amp;gt;

ENV REFRESHED_AT 2016-02-06

RUN apt-get -yqq update
RUN apt-get install -yqq nginx
RUN mkdir -p /var/www/html

ADD nginx/nginx.conf /etc/nginx/nginx.conf
ADD nginx/static.conf /etc/nginx/conf.d/static.conf

VOLUME &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/var/www/html&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
WORKDIR /var/www/html

EXPOSE 80

ENTRYPOINT &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nginx&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h4 id=&quot;nginx.conf&quot;&gt;nginx.conf&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;user www-data;
worker_processes 4;
pid /run/nginx.pid;
daemon off;
events { }
http {
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  types_hash_max_size 2048;
  include /etc/nginx/mime.types;
  default_type application/octet-stream;
  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log;
  gzip on;
  gzip_disable &quot;msie6&quot;;
  include /etc/nginx/conf.d/*.conf;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h4 id=&quot;static.conf&quot;&gt;static.conf&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;server {
  listen 0.0.0.0:80;
  server_name _;
  root /var/www/html/;
  index index.html index.htm;
  access_log /var/log/nginx/default_access.log;
  error_log /var/log/nginx/default_error.log;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;docker的image就build好了，这里简单讲讲Dockerfile的语法&lt;/p&gt;

&lt;p&gt;FROM: Dockerfile的第一行必须是FROM，表示基于那个基础Docker image&lt;/p&gt;

&lt;p&gt;ENV: 设置环境变量&lt;/p&gt;

&lt;p&gt;MAINTAINER: 告诉docker该image的作者和他的邮箱地址，也是很有必要的&lt;/p&gt;

&lt;p&gt;RUN: 用shell执行一条命令，可以写成RUN xxx ... 或者RUN [&amp;quot;xxx&amp;quot;, ...]&lt;/p&gt;

&lt;p&gt;CMD: 执行一条命令，当image被运行(推出)时，用法和RUN相识&lt;/p&gt;

&lt;p&gt;ENTRYPOINT: 执行一条命令，当image被运行(推出)时，并且可以在运行时对该命令附加参数&lt;/p&gt;

&lt;p&gt;WORKDIR: 设置工作目录，相当于bash下的cd dir&lt;/p&gt;

&lt;p&gt;USER: 设置在docker build下执行命令的用户&lt;/p&gt;

&lt;p&gt;VOLUME: 方便容器之间挂载目录，可以在image被运行时配合--volumes-from使用&lt;/p&gt;

&lt;p&gt;ADD: 把文件复制到image中，第一参数可填写网址，但不可访问当前目录以外的路径&lt;/p&gt;

&lt;p&gt;COPY: 把文件夹复制到image中&lt;/p&gt;

&lt;p&gt;ONBUILD: 在该image作为FROM基本容器再次build时执行&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;h3 id=&quot;build-nginx和jekyll的image&quot;&gt;build nginx和jekyll的image&lt;/h3&gt;

&lt;p&gt;# build jekyll base image&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;cd Dockerfile存放目录
sudo docker build -t bigpigeon0/jekyll . 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;# build jekyll create image&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;cd Dockerfile存放目录
sudo docker build -t bigpigeon0/blog_create .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;# build jekyll create image&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;cd Dockerfile存放目录
sudo docker build -t bigpigeon0/blog_push .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;# build nginx image&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;cd Dockerfile存放目录
sudo docker build -t bigpigeon0/nginx .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h3 id=&quot;运行docker&quot;&gt;运行Docker&lt;/h3&gt;

&lt;p&gt;# 把jekyll的模板下载下来&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;mkdir -p /data/work/ &amp;amp;&amp;amp; cd /data/work/
git clone https://github.com/bigpigeon/bigpigeon.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;# 运行一个博客生成的镜像&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;sudo docker run  -v /data/work/bigpigeon.github.io:/data --name blog_create bigpigeon0/blog_create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;# 运行nginx的镜像&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;sudo docker run -p 8080:80 -d --name nginx --volumes-from blog_create bigpigeon0/nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;# 生成博客提交到github&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;记得把key/id_rsa.pub中的内容添加到github.com/settings/ssh中&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;sudo docker run -t -i -v /data/work/bigpigeon.github.io:/data/blog --name blog_push bigpigeon0/blog_push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;# 更新模板后重新生成网页和提交网页&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;docker start blog_create
docker start -a blog_push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;测试网站&quot;&gt;测试网站&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;在浏览器输入http://&lt;serveraddr&gt;:8080 查看&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;使用rake更新网站&quot;&gt;使用rake更新网站&lt;/h3&gt;

&lt;h5 id=&quot;the.docker.book有中文版，然而我觉得价格太坑爹，还是不推荐大家买(电子书比实体书还贵)&quot;&gt;The.Docker.Book有&lt;a href=&quot;http://www.amazon.cn/%E7%AC%AC%E4%B8%80%E6%9C%ACDocker%E4%B9%A6-%E8%A9%B9%E5%A7%86%E6%96%AF%C2%B7%E7%89%B9%E6%81%A9%E5%B8%83%E5%B0%94/dp/B00RBEIFMI/&quot;&gt;中文版&lt;/a&gt;，然而我觉得价格太坑爹，还是不推荐大家买(电子书比实体书还贵)&lt;/h5&gt;
</description>
        <pubDate>Sat, 06 Feb 2016 22:06:00 +0800</pubDate>
        <link>http://bigpigeon.github.io/2016/02/06/dockerexample/</link>
        <guid isPermaLink="true">http://bigpigeon.github.io/2016/02/06/dockerexample/</guid>
        
        
        <category>笔记</category>
        
      </item>
    
      <item>
        <title>gin框架介绍</title>
        <description>&lt;h4 id=&quot;gin的特性&quot;&gt;gin的特性&lt;/h4&gt;

&lt;p&gt;支持中间层&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;一个请求过来经过 global middleware,group middleware 最后到该path的middleware处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;大概是这个样子&lt;/p&gt;

&lt;p&gt;&lt;svg width=&quot;50%&quot; height=&quot;50%&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 480 720&quot;&gt;
 &amp;lt;!-- Created with SVG-edit - &lt;a href=&quot;http://svg-edit.googlecode.com/&quot;&gt;http://svg-edit.googlecode.com/&lt;/a&gt; --&amp;gt;
 &lt;defs&gt;
  &lt;linearGradient id=&quot;svg_61&quot; x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;1&quot; y2=&quot;1&quot;&gt;
   &lt;stop offset=&quot;0&quot; stop-color=&quot;#1855f2&quot;/&gt;
   &lt;stop offset=&quot;1&quot; stop-color=&quot;#06cc58&quot;/&gt;
  &lt;/linearGradient&gt;
  &lt;linearGradient id=&quot;svg_64&quot; x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;1&quot; y2=&quot;1&quot;&gt;
   &lt;stop offset=&quot;0&quot; stop-color=&quot;#ff0000&quot;/&gt;
   &lt;stop offset=&quot;1&quot; stop-color=&quot;#ffff00&quot;/&gt;
  &lt;/linearGradient&gt;
  &lt;linearGradient id=&quot;svg_67&quot; x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;1&quot; y2=&quot;1&quot;&gt;
   &lt;stop offset=&quot;0&quot; stop-color=&quot;#ff00c3&quot;/&gt;
   &lt;stop offset=&quot;1&quot; stop-color=&quot;#0000ff&quot;/&gt;
  &lt;/linearGradient&gt;
 &lt;/defs&gt;
 &lt;g&gt;
  &lt;title&gt;Layer 1&lt;/title&gt;
  &lt;path transform=&quot;rotate(180 238.03820800781247,326.5081787109375) &quot; id=&quot;svg_7&quot; d=&quot;m207.32001,325.73959l30.71864,-320.23144l30.71776,320.23144l-15.3591,0l0,321.76859l-30.71864,0l0,-321.76859l-15.35866,0z&quot; stroke-linecap=&quot;null&quot; stroke-linejoin=&quot;null&quot; stroke-width=&quot;5&quot; stroke=&quot;#828282&quot; fill=&quot;#5b5050&quot;/&gt;
  &lt;g id=&quot;svg_71&quot;&gt;
   &lt;ellipse fill=&quot;url(#svg_61)&quot; stroke=&quot;#3ddbc8&quot; stroke-width=&quot;5&quot; stroke-linejoin=&quot;null&quot; stroke-linecap=&quot;null&quot; opacity=&quot;0.36&quot; cx=&quot;243.50001&quot; cy=&quot;364.49999&quot; id=&quot;svg_54&quot; rx=&quot;318.49999&quot; ry=&quot;225.49999&quot; transform=&quot;rotate(90 243.49999999999997,364.50000000000006) &quot;/&gt;
   &lt;g id=&quot;svg_70&quot;&gt;
    &lt;ellipse fill=&quot;url(#svg_64)&quot; stroke=&quot;#3ddbc8&quot; stroke-width=&quot;5&quot; stroke-linejoin=&quot;null&quot; stroke-linecap=&quot;null&quot; opacity=&quot;0.36&quot; cx=&quot;240&quot; cy=&quot;494&quot; id=&quot;svg_63&quot; rx=&quot;192&quot; ry=&quot;122&quot; transform=&quot;rotate(90 239.99999999999997,494.00000000000006) &quot;/&gt;
    &lt;g id=&quot;svg_69&quot;&gt;
     &lt;ellipse fill=&quot;url(#svg_67)&quot; stroke=&quot;#3ddbc8&quot; stroke-width=&quot;5&quot; stroke-linejoin=&quot;null&quot; stroke-linecap=&quot;null&quot; opacity=&quot;0.36&quot; cx=&quot;240&quot; cy=&quot;571&quot; id=&quot;svg_66&quot; rx=&quot;112&quot; ry=&quot;80&quot; transform=&quot;rotate(90 239.99999999999991,571.0000000000001) &quot;/&gt;
     &lt;text fill=&quot;#000000&quot; stroke=&quot;#3ddbc8&quot; stroke-width=&quot;0&quot; stroke-linejoin=&quot;null&quot; stroke-linecap=&quot;null&quot; x=&quot;238&quot; y=&quot;494&quot; id=&quot;svg_4&quot; font-size=&quot;12&quot; font-family=&quot;Fantasy&quot; text-anchor=&quot;middle&quot; xml:space=&quot;preserve&quot;&gt;handle middleware&lt;/text&gt;
     &lt;text fill=&quot;#000000&quot; stroke=&quot;#3ddbc8&quot; stroke-width=&quot;0&quot; stroke-linejoin=&quot;null&quot; stroke-linecap=&quot;null&quot; x=&quot;239&quot; y=&quot;509&quot; id=&quot;svg_5&quot; font-size=&quot;12&quot; font-family=&quot;Fantasy&quot; text-anchor=&quot;middle&quot; xml:space=&quot;preserve&quot;&gt;path=/click&lt;/text&gt;
    &lt;/g&gt;
    &lt;text fill=&quot;#000000&quot; stroke=&quot;#3ddbc8&quot; stroke-width=&quot;0&quot; stroke-linejoin=&quot;null&quot; stroke-linecap=&quot;null&quot; x=&quot;289.97143&quot; y=&quot;312.33334&quot; id=&quot;svg_2&quot; font-size=&quot;12&quot; font-family=&quot;Fantasy&quot; text-anchor=&quot;middle&quot; xml:space=&quot;preserve&quot; transform=&quot;matrix(1.2068965435028076,0,0,1.799999952316284,-107.96551334857939,-219.59998703002927) &quot;&gt;group middleware&lt;/text&gt;
    &lt;text fill=&quot;#000000&quot; stroke=&quot;#3ddbc8&quot; stroke-width=&quot;0&quot; stroke-linejoin=&quot;null&quot; stroke-linecap=&quot;null&quot; x=&quot;239&quot; y=&quot;354&quot; id=&quot;svg_6&quot; font-size=&quot;12&quot; font-family=&quot;Fantasy&quot; text-anchor=&quot;middle&quot; xml:space=&quot;preserve&quot;&gt;path=/amount&lt;/text&gt;
   &lt;/g&gt;
   &lt;text fill=&quot;#000000&quot; stroke=&quot;#3ddbc8&quot; stroke-width=&quot;0&quot; stroke-linejoin=&quot;null&quot; stroke-linecap=&quot;null&quot; x=&quot;314.82313&quot; y=&quot;78.11765&quot; id=&quot;svg_1&quot; font-size=&quot;12&quot; font-family=&quot;Fantasy&quot; text-anchor=&quot;middle&quot; xml:space=&quot;preserve&quot; transform=&quot;matrix(1.651685357093811,0,0,2.2666666507720947,-275.988748729229,-84.86666560173035) &quot;&gt;global middleware&lt;/text&gt;
  &lt;/g&gt;
  &lt;rect id=&quot;svg_72&quot; height=&quot;37&quot; width=&quot;286&quot; y=&quot;122&quot; x=&quot;101&quot; opacity=&quot;0.36&quot; stroke-linecap=&quot;null&quot; stroke-linejoin=&quot;null&quot; stroke-width=&quot;5&quot; stroke=&quot;#1bd1c4&quot; fill=&quot;#2d3fc6&quot;/&gt;
  &lt;rect id=&quot;svg_75&quot; height=&quot;43&quot; width=&quot;349&quot; y=&quot;165&quot; x=&quot;71&quot; opacity=&quot;0.36&quot; stroke-linecap=&quot;null&quot; stroke-linejoin=&quot;null&quot; stroke-width=&quot;5&quot; stroke=&quot;#1348db&quot; fill=&quot;#1aef56&quot;/&gt;
  &lt;rect id=&quot;svg_78&quot; height=&quot;38&quot; width=&quot;151&quot; y=&quot;358&quot; x=&quot;166&quot; opacity=&quot;0.36&quot; stroke-linecap=&quot;null&quot; stroke-linejoin=&quot;null&quot; stroke-width=&quot;3&quot; stroke=&quot;#35f2dc&quot; fill=&quot;#d81549&quot;/&gt;
  &lt;text transform=&quot;matrix(1.7638888359069824,0,0,2.200000047683716,-370.4860854148865,-242.4000096321106) &quot; xml:space=&quot;preserve&quot; text-anchor=&quot;middle&quot; font-family=&quot;Fantasy&quot; font-size=&quot;12&quot; id=&quot;svg_79&quot; y=&quot;285.13637&quot; x=&quot;347.80314&quot; opacity=&quot;0.36&quot; stroke-linecap=&quot;null&quot; stroke-linejoin=&quot;null&quot; stroke-width=&quot;0&quot; stroke=&quot;#1bd1c4&quot; fill=&quot;#000000&quot;&gt;function auth&lt;/text&gt;
  &lt;rect id=&quot;svg_80&quot; height=&quot;29&quot; width=&quot;122&quot; y=&quot;511&quot; x=&quot;181&quot; opacity=&quot;0.36&quot; stroke-linecap=&quot;null&quot; stroke-linejoin=&quot;null&quot; stroke-width=&quot;2&quot; stroke=&quot;#1bd1c4&quot; fill=&quot;#276eba&quot;/&gt;
  &lt;text transform=&quot;matrix(1.0229885578155518,0,0,1.5333333015441895,-14.080491662025452,-124.26665925979614) &quot; xml:space=&quot;preserve&quot; text-anchor=&quot;middle&quot; font-family=&quot;Fantasy&quot; font-size=&quot;12&quot; id=&quot;svg_81&quot; y=&quot;427.6087&quot; x=&quot;249.34833&quot; opacity=&quot;0.36&quot; stroke-linecap=&quot;null&quot; stroke-linejoin=&quot;null&quot; stroke-width=&quot;0&quot; stroke=&quot;#1bd1c4&quot; fill=&quot;#000000&quot;&gt;function amount&lt;/text&gt;
  &lt;text transform=&quot;matrix(1.7917961062034058,0,0,1.8834476742524937,-218.1318388451736,-165.59681401862179) &quot; xml:space=&quot;preserve&quot; text-anchor=&quot;middle&quot; font-family=&quot;Fantasy&quot; font-size=&quot;12&quot; id=&quot;svg_73&quot; y=&quot;167.35121&quot; x=&quot;257.49196&quot; opacity=&quot;0.36&quot; stroke-linecap=&quot;null&quot; stroke-linejoin=&quot;null&quot; stroke-width=&quot;0&quot; stroke=&quot;#1bd1c4&quot; fill=&quot;#000000&quot;&gt;function  recovery&lt;/text&gt;
  &lt;text transform=&quot;matrix(3.902939223805504,0,0,1.8285715429774143,-925.6625175890174,-105.33097001154798) &quot; xml:space=&quot;preserve&quot; text-anchor=&quot;middle&quot; font-family=&quot;Fantasy&quot; font-size=&quot;12&quot; id=&quot;svg_77&quot; y=&quot;163.45282&quot; x=&quot;298.13723&quot; opacity=&quot;0.36&quot; stroke-linecap=&quot;null&quot; stroke-linejoin=&quot;null&quot; stroke-width=&quot;0&quot; stroke=&quot;#1bd1c4&quot; fill=&quot;#000000&quot;&gt;function logger&lt;/text&gt;
  &lt;text transform=&quot;matrix(1.369369387626648,0,0,1.5333333015441895,-68.33333671092987,-6.933332920074463) &quot; xml:space=&quot;preserve&quot; text-anchor=&quot;middle&quot; font-family=&quot;Fantasy&quot; font-size=&quot;12&quot; id=&quot;svg_8&quot; y=&quot;25.65217&quot; x=&quot;225.16447&quot; stroke-linecap=&quot;null&quot; stroke-linejoin=&quot;null&quot; stroke-width=&quot;0&quot; stroke=&quot;#828282&quot; fill=&quot;#ff0000&quot;&gt;request /amount/click&lt;/text&gt;
 &lt;/g&gt;
&lt;/svg&gt;&lt;/p&gt;

&lt;p&gt;基于Radix tree&lt;/p&gt;

&lt;p&gt;永不崩溃&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;处理请求崩溃后会在Recover函数中恢复然后返回500&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;更多特性请看&lt;a href=&quot;https://gin-gonic.github.io/gin/&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;基本用法&quot;&gt;基本用法&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pingPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pong&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ping&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pingPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:80&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;上面的代码是什么意思呢？&quot;&gt;上面的代码是什么意思呢？&lt;/h3&gt;

&lt;h4 id=&quot;先看看gin.default的源码&quot;&gt;先看看gin.Default的源码&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Recovery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;New()是用默认参数构造一个engine&lt;/li&gt;
&lt;li&gt;engine.Use(...)把Recovery() 和Logger()生成的函数增加值全局handler列&lt;/li&gt;
&lt;li&gt;engine.Use要在所有handle的middleware绑定之前使用，否则某些绑定的path会不生效(在group的middleware之后加是可以的)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;然后我们来看看recovery干了什么&quot;&gt;然后我们来看看Recovery干了什么&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Recovery returns a middleware that recovers from any panics and writes a 500 if there was one.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Recovery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HandlerFunc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RecoveryWithWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefaultWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RecoveryWithWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HandlerFunc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LstdFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Panic recovery -&amp;gt; %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AbortWithStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;关于recover的使用可以看&lt;a href=&quot;http://blog.golang.org/defer-panic-and-recover&quot;&gt;http://blog.golang.org/defer-panic-and-recover&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;defer的函数会在函数结束后返回前调用&lt;/li&gt;
&lt;li&gt;c.Next()就是调用下一个handler 就和Nodejs中的http库差不多&lt;/li&gt;
&lt;li&gt;大致流程就是 FuncBody -&amp;gt; c.Next -&amp;gt; defer func (一个灾难恢复就这样简单的实现了)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;再然后来看看logger&quot;&gt;再然后来看看Logger&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Instances a Logger middleware that will write the logs to gin.DefaultWriter
// By default gin.DefaultWriter = os.Stdout
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HandlerFunc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerWithWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefaultWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Instance a Logger middleware with the specified writter buffer.
// Example: os.Stdout, a file opened in write mode, a socket...
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerWithWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HandlerFunc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Start timer
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Process request
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Stop timer
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;latency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;clientIP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClientIP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;statusCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;statusColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colorForStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;methodColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colorForMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ByType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorTypePrivate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[GIN] %v |%s %3d %s| %13v | %s |%s  %s %-7s %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2006/01/02 - 15:04:05&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;statusColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;latency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;clientIP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;methodColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;大致就是输出请求头的数据和处理请求所花费的时间&lt;/li&gt;
&lt;li&gt;但听说获取系统时间会有阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;再来看看r.get之后发生了什么&quot;&gt;再来看看r.GET之后发生了什么&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// routergroup file 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RouterGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relativePath&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandlerFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IRoutes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relativePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RouterGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relativePath&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HandlersChain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IRoutes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;absolutePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculateAbsolutePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relativePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;combineHandlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addRoute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolutePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;returnObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;这里的类是RouterGroup但上面gin.Default()返回的却是是Engine&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;于是我们看看engine的定义&quot;&gt;于是我们看看Engine的定义&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Engine is the framework&#39;s instance, it contains the muxer, middleware and configuration settings.
// Create an instance of Engine, by using New() or Default()
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RouterGroup&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HTMLRender&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HTMLRender&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;allNoRoute&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;HandlersChain&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;allNoMethod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HandlersChain&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;noRoute&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;HandlersChain&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;noMethod&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;HandlersChain&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pool&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;trees&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;methodTrees&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//忽略一些太长的数据
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Engine 是继承于RouteGroup的&lt;/li&gt;
&lt;li&gt;其实可以把Engine当成是RouteGroup节点，Group是可以嵌套的&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;最后看一下handler函数的context参数&quot;&gt;最后看一下handler函数的Context参数&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Context is the most important part of gin. It allows us to pass variables between middleware,
// manage the flow, validate the JSON of a request and render a JSON response for example.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writermem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseWriter&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Writer&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Params&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;Params&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HandlersChain&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;int8&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Engine&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Keys&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Errors&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;errorMsgs&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Accepted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Next should be used only inside middleware.
// It executes the pending handlers in the chain inside the calling handler.
// See example in github.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;这里只展示了Context的定义和Next函数的实现,&lt;a href=&quot;https://github.com/gin-gonic/gin/blob/master/context.go&quot;&gt;详细看源码&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;gin的运作原理大概就是这样了,之后讲gin的一些example和&lt;a href=&quot;https://github.com/gin-gonic/gin&quot;&gt;gin的github page&lt;/a&gt;上的一样&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;包含参数的路径&quot;&gt;包含参数的路径&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;net/http&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 这种写法只会匹配/user/pigeon ,/user/ 和/user就不会被匹配 
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/user/:name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatusOK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//这种写法会匹配 /user/pigeon/ 和/user/pigeon/enter 或 /user/pigeon/to/doing/something
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/user/:name/*action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatusOK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:80&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;大概规则就是这样&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;query字符串参数&quot;&gt;Query字符串参数&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 注:Query函数获取的值都必定是字符串
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/welcome&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;firstname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefaultQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;firstname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Guest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lastname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lastname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// shortcut for c.Request.URL.Query().Get(&quot;lastname&quot;)
&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatusOK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello %s %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:80&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;请尝试用如下请求路径来请求:  /welcome?firstname=Jane&amp;amp;lastname=Doe&lt;/li&gt;
&lt;li&gt;然后查看请求结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;model-binding-and-validation&quot;&gt;Model binding and validation&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;net/http&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Binding from JSON
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Login&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;required&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Password&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;required&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 该例子将绑定一个拥有 user 和 password 键的JSON数据
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/loginJSON&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Login&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BindJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;manu&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;123&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatusOK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;you are logged in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatusUnauthorized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;unauthorized&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Example for binding a HTML form (user=manu&amp;amp;password=123)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/loginForm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Login&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 用http头中Content-Type 的值去判定数据类型
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;manu&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;123&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatusOK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;you are logged in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatusUnauthorized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;unauthorized&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:80&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;在中间层中使用goroute&quot;&gt;在中间层中使用goroute&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;log&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/long_async&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// create copy to be used inside the goroutine
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;c_cp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// simulate a long task with time.Sleep(). 5 seconds
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// note than you are using the copied context &quot;c_cp&quot;, IMPORTANT
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Done! in path &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_cp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;


    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/long_sync&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// simulate a long task with time.Sleep(). 5 seconds
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// since we are NOT using a goroutine, we do not have to copy the context
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Done! in path &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:80&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;goroute 中请使用只读的Context,用Context.Copy可以返回一个只读的Context&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;blockquote&gt;
&lt;p&gt;先写到这，gin的内容一章写完感觉不切实际&lt;/p&gt;

&lt;p&gt;更多gin的信息可看这&lt;a href=&quot;https://gin-gonic.github.io/gin/&quot;&gt;https://gin-gonic.github.io/gin/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PS:redcarpet没法识别golang然后就出就用C的高亮了&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 24 Dec 2015 14:25:00 +0800</pubDate>
        <link>http://bigpigeon.github.io/2015/12/24/ginframework/</link>
        <guid isPermaLink="true">http://bigpigeon.github.io/2015/12/24/ginframework/</guid>
        
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>pac脚本优化</title>
        <description>&lt;p&gt;最近发现lantern和shadowsocks client自生成pac都一定的性能问题，在url数目上升到一定程度的时候加载速度明显慢了很多.&lt;/p&gt;

&lt;p&gt;于是我翻看了它们的实现&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lantern

&lt;ul&gt;
&lt;li&gt;把所有需要代理的domain组合成一个RegExp，然后在FindProxyForURL时对host做RegExp.exec的操作来判断是否需要代理&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;shadownsocks

&lt;ul&gt;
&lt;li&gt;  把domain做成一个{domain:1,...}的字典，然后在FindProxyForURL时对host做domains.hasOwnProperty判断是否在字典内，若不在，则去掉最前面的&amp;#39;.&amp;#39;和之前的内容 继续做domains.hasOwnProperty判断&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以看出lantern的pac会严重影响网页的加载速度，shadowsocks的稍微好点，但在遇到不需要代理的网页时则会消耗更多无谓的判断&lt;/p&gt;

&lt;p&gt;于是我自己实现一个pac优化FindProxyForURL匹配速度&lt;/p&gt;

&lt;p&gt;我的思路是:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;把所有需要代理的url以 &amp;#39;.&amp;#39; 分割成节点&lt;/li&gt;
&lt;li&gt;然后存入一个dict 格式如下&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;{
  &amp;quot;com&amp;quot;: {
    &amp;quot;google&amp;quot;: true,
    &amp;quot;blogspot&amp;quot;: {
      &amp;quot;www&amp;quot;: true  
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;在FindProxyForURL中把host也split成list与这个dict match一下&lt;/li&gt;
&lt;li&gt;贴上源码&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;var domains = [
    &amp;quot;google.com&amp;quot;,
    &amp;quot;www.blogspot.com&amp;quot;,
    ...
];
var domain_dict = {};
for(var i = 0; i &amp;lt; domains.length; i++){
    if(domains[i].endsWith(&amp;quot;.&amp;quot;)){
        domains[i] = domains[i].slice(0, -1)
    }
    var url_list = domains[i].split(&amp;#39;.&amp;#39;);

    var domain_node = domain_dict;
    for(var j = url_list.length; j &amp;gt; 0; j--){
        var node_name = url_list[j-1];
        if (!domain_node.hasOwnProperty(node_name)){
            if (j === 1){
                domain_node[node_name] = true;
                break;
            } else {
                domain_node[node_name] = {};
            }
        } else if(domain_node[node_name] === true) {
            break;
        }
        domain_node = domain_node[node_name];
    }
}

var proxy = &amp;quot;SOCKS5 127.0.0.1:1080; SOCKS 127.0.0.1:1080; DIRECT&amp;quot;;

var direct = &amp;#39;DIRECT;&amp;#39;;

function FindProxyForURL(url, host) {
    if( host == &amp;quot;localhost&amp;quot; ||
        host == &amp;quot;127.0.0.1&amp;quot;) {
        return direct;
    }
    var host_list = host.split(&amp;#39;.&amp;#39;)
    var domain_node = domain_dict
    for(var i = host_list.length; i &amp;gt; 0; i--){
        var node_name = host_list[i-1]
        if (domain_node.hasOwnProperty(node_name)){
            if(domain_node[node_name] === true){
                return proxy;
            } else {
                domain_node = domain_node[node_name]
            }

        }
        else {
            return direct;
        }
    }
    return direct;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;以下是我在nodejs下的性能测试结果 &lt;a href=&quot;/static/testdata/pac_benchmark.zip&quot;&gt;测试js下载地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;node benchmark.js 10000&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div id=&quot;bench-chart-10000&quot;&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;node benchmark.js 100000&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div id=&quot;bench-chart-100000&quot;&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;node benchmark.js 1000000&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div id=&quot;bench-chart-1000000&quot;&gt;&lt;/div&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
function makechart(id, data) {
  c3.generate({
    bindto: id,
    data: {
      columns: data,
      type: &#39;bar&#39;
    },
    axis: {
      y: {
        tick: {
          format: function (d) { return d + &quot;ms&quot;; }
        },
        label: &#39;time&#39;
      },
      x: {
        type: &#39;category&#39;,
        categories: [&#39;proxy_2_node&#39;, &#39;noproxy_2_node&#39;, &#39;proxy_3_node&#39;, &#39;noproxy_3_node&#39;, &#39;proxy_4_node&#39;, &#39;noproxy_4_node&#39;]
      }
    },

    bar: {
      width: {
          ratio: 0.5 // this makes bar width 50% of length between ticks
      }
    }
  });
}
makechart(
  &#39;#bench-chart-10000&#39;, 
  [
    [&#39;shadowsocks&#39;, 3, 2, 6, 3, 5, 4],
    [&#39;lantern&#39;, 4, 32, 2, 39, 18, 47],
    [&#39;bigpigeon_pac&#39;, 3, 3, 11, 3, 3, 3]
  ])
makechart(
  &#39;#bench-chart-100000&#39;, 
  [
    [&#39;shadowsocks&#39;, 24, 22, 37, 37, 47, 51],
    [&#39;lantern&#39;, 29, 279, 27, 373, 163, 441],
    [&#39;bigpigeon_pac&#39;, 27, 23, 29, 24, 29, 24]
  ])
makechart(
  &#39;#bench-chart-1000000&#39;, 
  [
    [&#39;shadowsocks&#39;, 136, 130, 287, 309, 401, 460],
    [&#39;lantern&#39;, 222, 2776, 258, 3698, 1631, 4420],
    [&#39;bigpigeon_pac&#39;, 224, 220, 285, 218, 287, 220]
  ])
&lt;/script&gt;

</description>
        <pubDate>Sun, 20 Dec 2015 06:00:00 +0800</pubDate>
        <link>http://bigpigeon.github.io/2015/12/20/pacopt/</link>
        <guid isPermaLink="true">http://bigpigeon.github.io/2015/12/20/pacopt/</guid>
        
        
        <category>笔记</category>
        
      </item>
    
      <item>
        <title>jekyll部署总结</title>
        <description>&lt;ul&gt;
&lt;li&gt;在网络并不好的情况下用gem install jeskll 代替 bundle install ，bundle install 总会出现 各种connection reset的情况&lt;/li&gt;
&lt;li&gt;把博客上传github的时候主要不要把_site里的内容上传上去，不然会你的邮箱会收到一个Page build failure的邮件&lt;/li&gt;
&lt;li&gt;这个博客的模板我是fork &lt;a href=&quot;https://github.com/Gaohaoyang&quot;&gt;浩阳 Gaohaoyang&lt;/a&gt; 的 &lt;a href=&quot;https://github.com/Gaohaoyang/gaohaoyang.github.io&quot;&gt;博客模板&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;其实我还是希望设计一个有特色点的博客，但毕竟我前端技能很烂，只能先用别人的了.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 10 Dec 2015 00:00:00 +0800</pubDate>
        <link>http://bigpigeon.github.io/2015/12/10/jekylldeploy/</link>
        <guid isPermaLink="true">http://bigpigeon.github.io/2015/12/10/jekylldeploy/</guid>
        
        
        <category>笔记</category>
        
      </item>
    
  </channel>
</rss>
