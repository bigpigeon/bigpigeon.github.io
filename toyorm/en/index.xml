<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Toyorm on Toyorm documentation</title>
    <link>https://bigpigeon.org/toyorm/en/</link>
    <description>Recent content in Toyorm on Toyorm documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://bigpigeon.org/toyorm/en/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>toy toolkit</title>
      <link>https://bigpigeon.org/toyorm/en/2_engine/toy_toolkit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bigpigeon.org/toyorm/en/2_engine/toy_toolkit/</guid>
      <description> SetDebug set default debug mode
toy.SetDebug(true) // set default debug mode 	brick := toy.Model(&amp;amp;User{}) // now ToyBrick debug mode is true 	</description>
    </item>
    
    <item>
      <title>Type Translate</title>
      <link>https://bigpigeon.org/toyorm/en/3_data_definition/type_translation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bigpigeon.org/toyorm/en/3_data_definition/type_translation/</guid>
      <description>if sql type is null, toyorm will ignore it in Sql Operation
you can use &amp;lt;type:sql_type&amp;gt; tag to declaration field sql type
the following Go type will auto declaration it&amp;rsquo;s sql type
   Go Type sql type     bool BOOLEAN   int8,int16,int32,uint8,uint16,uint32 INTEGER   int64,uint64,int,uint BIGINT   float32,float64 FLOAT   string VARCHAR(255)   time.Time TIMESTAMP   []byte VARCHAR(255)   sql.</description>
    </item>
    
    <item>
      <title>Tag declaration</title>
      <link>https://bigpigeon.org/toyorm/en/3_data_definition/tag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bigpigeon.org/toyorm/en/3_data_definition/tag/</guid>
      <description>declaration format can be &amp;lt;key:value&amp;gt; or &amp;lt;key&amp;gt;
type User struct { toyorm.ModelDefault Name uint `toyorm:&amp;#34;index&amp;#34;` // key only tag declaration  FullName string `toyorm:&amp;#34;column:fullname&amp;#34;` // key:value tag declaration }  the following is special tag declaration     Key Value Description     index void or string use for optimization when search condition have this field,if you want make a combined,just set same index name with fields   unique index void or string have unique limit index, other same as index   primary key void allow multiple primary key,but some operation not support   - void ignore this field in sql   type string sql type   column string sql column name   auto_increment void recommend, if your table primary key have auto_increment attribute must add it   autoincrement void same as auto_increment   foreign key void to add foreign key feature when create table   alias string change field name with toyorm   join string to select related field when call brick.</description>
    </item>
    
    <item>
      <title>Bind Field</title>
      <link>https://bigpigeon.org/toyorm/en/4_toy_brick/4_bind_field/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bigpigeon.org/toyorm/en/4_toy_brick/4_bind_field/</guid>
      <description>use bind fields method to rule which field in sql operation
if bind fields, skill IgnoreMode
BindDefaultFields work on all Mode
{ var p Product result, err := brick.BindDefaultFields(Offsetof(p.Price), Offsetof(p.UpdatedAt)).Update(&amp;amp;Product{ Price: 0, }) // UPDATE `product` SET price=?,updated_at=? WHERE deleted_at IS NULL args:[0,&amp;#34;2018-05-14T12:16:21.731031534+08:00&amp;#34;]  // process error  ... } var products []Product result, err = brick.Find(&amp;amp;products) // process error ... for _, p := range products { fmt.Printf(&amp;#34;product name %s, price %v\n&amp;#34;, p.</description>
    </item>
    
    <item>
      <title>Condition</title>
      <link>https://bigpigeon.org/toyorm/en/4_toy_brick/1_condition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bigpigeon.org/toyorm/en/4_toy_brick/1_condition/</guid>
      <description>Condition work on Update/Find/Delete operation
where will clean old conditions and make new one
brick.Where(&amp;lt;expr&amp;gt;, &amp;lt;Key&amp;gt;, [value])  whereGroup add multiple condition with same expr
brick.WhereGroup(&amp;lt;expr&amp;gt;, &amp;lt;group&amp;gt;)  conditions will copy conditions and clean old conditions
brick.Conditions(&amp;lt;toyorm.Search&amp;gt;)  or &amp;amp; and condition will use or/and to link new condition when current condition is not nil
brick.Or().Condition(&amp;lt;expr&amp;gt;, &amp;lt;Key&amp;gt;, [value]) brick.Or().ConditionGroup(&amp;lt;expr&amp;gt;, &amp;lt;group&amp;gt;) brick.And().Condition(&amp;lt;expr&amp;gt;, &amp;lt;Key&amp;gt;, [value]) brick.And().ConditionGroup(&amp;lt;expr&amp;gt;, &amp;lt;group&amp;gt;)  or &amp;amp; and conditions will use or/and to link new conditions</description>
    </item>
    
    <item>
      <title>Field Selector</title>
      <link>https://bigpigeon.org/toyorm/en/4_toy_brick/11_field_selector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bigpigeon.org/toyorm/en/4_toy_brick/11_field_selector/</guid>
      <description>toyorm support multiple way to get model fieldï¼Œfrom struct, field name or field offset
you can use any kind to access it e.g
insert // use struct // insert with struct product := Product{ Name: &amp;#34;sth&amp;#34;, Price: 22, } brick.Insert(&amp;amp;product) // or insert with name map product := map[string]interface{}{ &amp;#34;Name&amp;#34;: &amp;#34;sth&amp;#34;, &amp;#34;Price&amp;#34;: 22, } brick.Insert(&amp;amp;product) // or insert with offsetof map, in this method, you need import &amp;#34;unsafe&amp;#34; to get it&amp;#39;s Offsetof function product := map[uintptr]interface{}{ Offsetof(Product{}.</description>
    </item>
    
    <item>
      <title>Ignore Zero Value</title>
      <link>https://bigpigeon.org/toyorm/en/4_toy_brick/3_ignore_mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bigpigeon.org/toyorm/en/4_toy_brick/3_ignore_mode/</guid>
      <description>when I Update or Search with struct that have some zero value, did I update it ?
use IgnoreMode to differentiate what zero value should update
brick = brick.IgnoreMode(toyorm.Mode(&amp;#34;Update&amp;#34;), toyorm.IgnoreZero ^ toyorm.IgnoreZeroLen) // ignore all zeor value but excloud zero len slice // now field = []int(nil) will ignore when update // but field = []int{} will update when update // now field = map[int]int(nil) will ignore when update // but field = map[int]int{} will update when update In default</description>
    </item>
    
    <item>
      <title>Join</title>
      <link>https://bigpigeon.org/toyorm/en/4_toy_brick/9_join/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bigpigeon.org/toyorm/en/4_toy_brick/9_join/</guid>
      <description>Join association query can provide all record in one query
Model Define use join tag to association related field , join tag value must same as container field name
type Extra map[string]interface{} func (e *Extra) Scan(value interface{}) error { switch v := value.(type) { case string: return json.Unmarshal([]byte(v), e) case []byte: return json.Unmarshal(v, e) default: return errors.New(&amp;#34;not support type&amp;#34;) } } func (e Extra) Value() (driver.Value, error) { return json.</description>
    </item>
    
    <item>
      <title>Preload</title>
      <link>https://bigpigeon.org/toyorm/en/4_toy_brick/8_preload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bigpigeon.org/toyorm/en/4_toy_brick/8_preload/</guid>
      <description>preload need have relation field and container field(ManyToMany just need container field)
relations field is used to link the main record and sub record
relation field can be Foreign key, but not recommend
container field is used to save sub record, it does not belong to a table field
One to one relation field at sub model
relation field name must be main model type name + main model primary key name</description>
    </item>
    
    <item>
      <title>Result</title>
      <link>https://bigpigeon.org/toyorm/en/4_toy_brick/10_result/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bigpigeon.org/toyorm/en/4_toy_brick/10_result/</guid>
      <description>use Report to view sql action
report format
insert operation report
user := User{ Detail: &amp;amp;UserDetail{ MainPage: &amp;#34;some html code with you page&amp;#34;, Extra: Extra{&amp;#34;title&amp;#34;: &amp;#34;my blog&amp;#34;}, }, Blog: []Blog{ {Title: &amp;#34;how to write a blog&amp;#34;, Content: &amp;#34;first ...&amp;#34;}, {Title: &amp;#34;blog introduction&amp;#34;, Content: &amp;#34;...&amp;#34;}, }, Friends: []*User{ { Detail: &amp;amp;UserDetail{ MainPage: &amp;#34;some html code with you page&amp;#34;, Extra: Extra{}, }, Blog: []Blog{ {Title: &amp;#34;some python tech&amp;#34;, Content: &amp;#34;first ...&amp;#34;}, {Title: &amp;#34;my eleme_union_meal usage&amp;#34;, Content: &amp;#34;.</description>
    </item>
    
    <item>
      <title>Scope</title>
      <link>https://bigpigeon.org/toyorm/en/4_toy_brick/5_scope/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bigpigeon.org/toyorm/en/4_toy_brick/5_scope/</guid>
      <description>use scope to make custom build
// desc all order by fields brick.Scope(func(t *ToyBrick) *ToyBrick{ newOrderBy := make([]*ModelFields, len(t.orderBy)) for i, f := range t.orderBy { newOrderBy = append(newOrderBy, t.ToDesc(f)) } newt := *t newt.orderBy = newOrderBy return &amp;amp;newt })</description>
    </item>
    
    <item>
      <title>Template</title>
      <link>https://bigpigeon.org/toyorm/en/4_toy_brick/6_template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bigpigeon.org/toyorm/en/4_toy_brick/6_template/</guid>
      <description>use template exec to replace default exec
now template only support Insert/Save/Update/Find
Custom insert data := Product{ Name: &amp;#34;bag&amp;#34;, Price: 9999, Count: 2, Tag: &amp;#34;container&amp;#34;, } result, err := brick.Template(&amp;#34;INSERT INTO $ModelName($Columns) Values($Values)&amp;#34;).Insert(&amp;amp;data) // INSERT INTO product(created_at,updated_at,deleted_at,name,price,count,tag) Values(?,?,?,?,?,?,?) args:[&amp;#34;2018-04-01T17:05:48.927499+08:00&amp;#34;,&amp;#34;2018-04-01T17:05:48.927499+08:00&amp;#34;,null,&amp;#34;bag&amp;#34;,9999,2,&amp;#34;container&amp;#34;] Custom find var data Product // if driver is mysql use &amp;#34;USE INDEX&amp;#34; replace &amp;#34;INDEXED BY&amp;#34; result, err := brick.Template(&amp;#34;SELECT $Columns FROM $ModelName INDEXED BY idx_product_name $Conditions&amp;#34;). Where(&amp;#34;=&amp;#34;, Offsetof(Product{}.Name), &amp;#34;bag&amp;#34;).Find(&amp;amp;data) // SELECT id,created_at,updated_at,deleted_at,name,price,count,tag FROM product INDEXED BY idx_product_name WHERE deleted_at IS NULL AND name = ?</description>
    </item>
    
    <item>
      <title>Thread Safe</title>
      <link>https://bigpigeon.org/toyorm/en/4_toy_brick/7_thread_safe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bigpigeon.org/toyorm/en/4_toy_brick/7_thread_safe/</guid>
      <description>Thread safe if you comply with the following agreement
 make sure ToyBrick object is read only, if you want to change it, create a new one
 do not use append to change ToyBrick&amp;rsquo;s slice data,use make and copy to clone new slice
  </description>
    </item>
    
    <item>
      <title>Transaction</title>
      <link>https://bigpigeon.org/toyorm/en/4_toy_brick/2_transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bigpigeon.org/toyorm/en/4_toy_brick/2_transaction/</guid>
      <description>start a transaction
brick = brick.Begin() rollback all sql action
err = brick.Rollback() commit all sql action
err = brick.</description>
    </item>
    
  </channel>
</rss>