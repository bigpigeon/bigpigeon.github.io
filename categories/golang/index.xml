<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on bigpigeon</title>
    <link>https://bigpigeon.org/categories/golang/</link>
    <description>Recent content in Golang on bigpigeon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Sun, 23 Sep 2018 12:42:00 +0800</lastBuildDate>
    
	<atom:link href="https://bigpigeon.org/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用go/ast来解析go文件III</title>
      <link>https://bigpigeon.org/post/go-ast-walk/</link>
      <pubDate>Sun, 23 Sep 2018 12:42:00 +0800</pubDate>
      
      <guid>https://bigpigeon.org/post/go-ast-walk/</guid>
      <description>&lt;p&gt;可能很多人想问types中的Type和Object接口有什么区别&lt;/p&gt;

&lt;p&gt;我觉得Object可以理解为有实体的Type或者是对Type的定义，Type则是一个Object的抽象&lt;/p&gt;

&lt;p&gt;比如type V1 struct {Name string}  和type V2 struct {Name string} V1和V2属于不同Object但它们的Underlying Type是一样的(Type不一样是因为它们是一个Named Type类型) ,不过type不能通过==来比较，必须用Identical&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用go/ast来解析go文件II</title>
      <link>https://bigpigeon.org/post/go-ast-type/</link>
      <pubDate>Wed, 23 May 2018 10:07:00 +0800</pubDate>
      
      <guid>https://bigpigeon.org/post/go-ast-type/</guid>
      <description>&lt;p&gt;在进行go文件解析经常需要对Ident对象的类型/值进行比较&lt;/p&gt;

&lt;p&gt;但go/ast只对单文件进行解析，并不适合用来比较类型，所以这个时候就需要用到另一个库go/types&lt;/p&gt;

&lt;p&gt;先来看看全部代码&lt;/p&gt;

&lt;p&gt;代码也可以通过&lt;a href=&#34;https://github.com/bigpigeon/Test/tree/master/go/blog_go_types&#34;&gt;这里&lt;/a&gt;下载，建议在看教程的同时运行这个demo代码&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用go/ast来解析go文件</title>
      <link>https://bigpigeon.org/post/go-ast-parser-file/</link>
      <pubDate>Sat, 05 May 2018 10:07:00 +0800</pubDate>
      
      <guid>https://bigpigeon.org/post/go-ast-parser-file/</guid>
      <description>&lt;p&gt;go/ast是go的type checker 标准包之一(不是编译器的那套工具，编译器用的另外一套)，它定义了抽象语法树(AST)的数据类型和操作ast节点的工具&lt;/p&gt;

&lt;p&gt;下面我们来看看如何ast树的结构&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;package main

import (
	&amp;quot;go/ast&amp;quot;
	&amp;quot;go/parser&amp;quot;
	&amp;quot;go/token&amp;quot;
)

func main() {
	src := `
package main

// 该声明为GenDecl TOK=token.IMPORT
import &amp;quot;fmt&amp;quot;

// 该声明为GenDecl TOK=token.TYPE
type Product struct {
	Name string
}

// 该声明为GenDecl TOK=token.VAR
var product Product

// 该声明为FunDecl
func main() { //test1
	fmt.Println(&amp;quot;Hello, World!&amp;quot;) //test2
	a := []int{1,2,3}
	a[1],a[2] = 5,6
}
`
	fset := token.NewFileSet() // 位置是相对于节点
	// 用ParseFile把文件解析成*ast.File节点
	f, err := parser.ParseFile(fset, &amp;quot;&amp;quot;, src, 0)
	if err != nil {
		panic(err)
	}

	// 打印ast节点
	ast.Print(fset, f)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gorm简介[中]</title>
      <link>https://bigpigeon.org/post/gorm-tutorial-second/</link>
      <pubDate>Fri, 23 Jun 2017 15:16:00 +0800</pubDate>
      
      <guid>https://bigpigeon.org/post/gorm-tutorial-second/</guid>
      <description>&lt;p&gt;上篇讲到如何用gorm增删改查，但如果涉及一些复杂的操作又想避免使用字符串就需要借助Scopes模块&lt;/p&gt;

&lt;h3 id=&#34;scopes简介&#34;&gt;scopes简介&lt;/h3&gt;

&lt;p&gt;scopes是需要一个自定义的函数&lt;strong&gt;func(db *gorm.DB) *gorm.DB&lt;/strong&gt;作为参数，这样就可以在不破坏链式语法的情况下自定义操作了&lt;/p&gt;

&lt;p&gt;比如我要查询GreekAlphabet表中LatinName是&amp;rdquo;Alpha&amp;rdquo;或 &amp;ldquo;Omega&amp;rdquo;的条目可以这样&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;chars := []GreekAlphabet{}
db.Model(&amp;amp;GreekAlphabet{}).Where(&amp;quot;latin_name in (?)&amp;quot;, []string{&amp;quot;Alpha&amp;quot;, &amp;quot;Omega&amp;quot;}).Find(&amp;amp;chars)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为查询多个字段的值只能用 &lt;strong&gt;Where(&amp;ldquo;field in (?)&amp;rdquo;, fields)&lt;/strong&gt; 这种方法，相当于是自己拼接sql语句了，这种方法非常容易出错，所以我们用Scopes封装这部分操作&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;firstAndLast := func(db *gorm.DB) *gorm.DB {
  return db.Where(&amp;quot;latin_name in (?)&amp;quot;, []string{&amp;quot;Alpha&amp;quot;, &amp;quot;Omega&amp;quot;})
}
chars := []GreekAlphabet{}
db.Model(&amp;amp;GreekAlphabet{}).Scopes(firstAndLast).Find(&amp;amp;chars).Error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样只要我们对firstAndLast做充足的单元测试就可以让其他人非常安心的使用了，但这样做还是很不灵活，所以下面我们使用offset来制造一个灵活的socpes查询&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>谈谈go的relfect</title>
      <link>https://bigpigeon.org/post/go-reflect-talk/</link>
      <pubDate>Tue, 06 Jun 2017 15:16:00 +0800</pubDate>
      
      <guid>https://bigpigeon.org/post/go-reflect-talk/</guid>
      <description>&lt;p&gt;go的reflect实现了一个运行时反射，它允许程序操纵任意类型的对象&lt;/p&gt;

&lt;p&gt;reflect.TypeOf函数能把对象的类型信息，它返回一个relect.Type&lt;/p&gt;

&lt;p&gt;reflect.Type.Field模块可以获得&lt;strong&gt;struct&lt;/strong&gt;或者&lt;strong&gt;interface&lt;/strong&gt;中的字段名，字段类型，字段的tag等信息&lt;/p&gt;

&lt;p&gt;reflect.ValueOf可以获得一个对象的值信息，比如它是指针还是实体，值的类型和interface类型下的值，它返回一个reflect.Value&lt;/p&gt;

&lt;p&gt;我这里简单谈谈reflect的用法和哪些能做到哪些不能做到&lt;/p&gt;

&lt;p&gt;Ps:以下所有代码都包含在这个&lt;a href=&#34;https://github.com/bigpigeon/Test/tree/master/go/reflect_demo&#34;&gt;测试项目&lt;/a&gt;中&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gorm简介[前]</title>
      <link>https://bigpigeon.org/post/gorm-tutorial-first/</link>
      <pubDate>Mon, 29 May 2017 15:16:00 +0800</pubDate>
      
      <guid>https://bigpigeon.org/post/gorm-tutorial-first/</guid>
      <description>&lt;p&gt;我们都知道，在正式环境中直接使用sql来查询数据库是很危险的，处理不好就有被注入式攻击的风险&lt;/p&gt;

&lt;p&gt;而且组装sql语句也容易出错和减低代码的可维护性&lt;/p&gt;

&lt;p&gt;所以需要一个工具来管理数据库语句的组装和操作&lt;/p&gt;

&lt;p&gt;gorm是目前比较成熟的go语言数据库管理库,它可以很方便的把go的结构体和数据库表绑定，从而简化获取数据的操作
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>并发测试</title>
      <link>https://bigpigeon.org/demo/concurrent/</link>
      <pubDate>Fri, 20 Jan 2017 17:59:00 +0800</pubDate>
      
      <guid>https://bigpigeon.org/demo/concurrent/</guid>
      <description>package main import ( &#34;fmt&#34; &#34;math/rand&#34; &#34;time&#34; ) func process(id int, result chan string) { // 开启一个定时任务的线程 heart := time.Duration(5) // 定时任务间隔 done := make(chan bool, 1) defer close(done) go func() { tick := time.NewTicker(heart * time.Second) defer tick.Stop() //	defer fmt.Println(&#34;tick stop:&#34;, id) for { select { case heart\n&#34;, id) case </description>
    </item>
    
    <item>
      <title>defer测试</title>
      <link>https://bigpigeon.org/demo/defer/</link>
      <pubDate>Sat, 16 Jan 2016 17:59:00 +0800</pubDate>
      
      <guid>https://bigpigeon.org/demo/defer/</guid>
      <description>package main import ( &#34;fmt&#34; &#34;sync&#34; &#34;testing&#34; ) //调用顺序 //最早调用的defer会在最后执行 func test0() { defer func() { fmt.Print(&#34;a\n&#34;) }() defer func() { fmt.Print(&#34;b&#34;) }() defer func() { fmt.Print(&#34;c&#34;) }() fmt.Println(&#34;test 0&#34;) } //defer是在函数结束后返回前被执行 //并且lambda闭包传的是值的引用 //也就是说如果返回值在函数定义时被命名，在defer调用的函数中就可以修改返回值 func test1() { doubleSum := func(x, y int) (z int) { //don&#39;t forget add () with return expression fmt.Printf(&#34;start:x(%p)=%d,y(%p)=%d,z(%p)=%d\n&#34;, &amp;x, x, &amp;y, y, &amp;z, z) defer func() { fmt.Printf(&#34;defer:x(%p)=%d,y(%p)=%d,z(%p)=%d\n&#34;, &amp;x, x, &amp;y, y, &amp;z, z) z = z * 2 }() x = x * 2 y = y * 2 return x + y } fmt.</description>
    </item>
    
    <item>
      <title>go array and slice</title>
      <link>https://bigpigeon.org/demo/goarray/</link>
      <pubDate>Sat, 16 Jan 2016 17:59:00 +0800</pubDate>
      
      <guid>https://bigpigeon.org/demo/goarray/</guid>
      <description>package main

import (
	&#34;fmt&#34;
)

//数组的初始化方式
func arrayInit() {
	fmt.Println(&#34;array init!&#34;)
	a := [4]int{1, 3, 5, 7}
	b := [...]int{2, 4, 6, 8}
	c := [...]int{3: 10, 5: 20}
	d := [...]struct {
		x uint
		y uint
	}{
		{50, 20},
		{30, 40},
	}
	e := [...][2]int{
		{1, 3},</description>
    </item>
    
    <item>
      <title>go clone</title>
      <link>https://bigpigeon.org/demo/goclone/</link>
      <pubDate>Sat, 16 Jan 2016 17:59:00 +0800</pubDate>
      
      <guid>https://bigpigeon.org/demo/goclone/</guid>
      <description>package main

import (
	&#34;fmt&#34;
)

func main() {
	//基本数据类型可以用任意方式克隆(int, float, complex, point)
	type BaseType int
	numA := BaseType(5)
	numB := numA
	var numC = numA
	fmt.Printf(&#34;number\nA:%p\nB:%p\nC:%p\n&#34;, &amp;numA, &amp;numB, &amp;numC)
	//list类型和基本类型一样
	listA := [3]int{1, 2, 3}
	listB := listA
	var listC = listA
	fmt.Printf(&#34;list:\nA:%p\nB:%p\nC:%p\n&#34;, &amp;listA, &amp;listB, &amp;listC)

	//struct类型也和基本类型一样
	type TestData struct {
		id   int</description>
    </item>
    
    <item>
      <title>go hello</title>
      <link>https://bigpigeon.org/demo/gohelloworld/</link>
      <pubDate>Sat, 16 Jan 2016 17:59:00 +0800</pubDate>
      
      <guid>https://bigpigeon.org/demo/gohelloworld/</guid>
      <description>package main

import &#34;fmt&#34;
import &#34;runtime&#34;

func main() {
	fmt.Println(&#34;Hello, playground&#34;)
	fmt.Println(runtime.GOMAXPROCS(0))
}</description>
    </item>
    
    <item>
      <title>go interface</title>
      <link>https://bigpigeon.org/demo/gointerface/</link>
      <pubDate>Sat, 16 Jan 2016 17:59:00 +0800</pubDate>
      
      <guid>https://bigpigeon.org/demo/gointerface/</guid>
      <description>package main

import (
	&#34;fmt&#34;
)

// 接口可以让函数更抽象
type Blunt interface {
	Beat() string
}

type Hammer struct {
}

func (h Hammer) Beat() string {
	return &#34;duang!!!&#34;
}

type Wrench struct {
}

func (w Wrench) Beat() string {
	return &#34;pang!!!&#34;
}

func BluntSound(b Blunt) {
	fmt.Println(b.Beat())
}

// 也可以为函数增方法
type Tester interface {
	Do()</description>
    </item>
    
    <item>
      <title>go sched</title>
      <link>https://bigpigeon.org/demo/gosched/</link>
      <pubDate>Sat, 16 Jan 2016 17:59:00 +0800</pubDate>
      
      <guid>https://bigpigeon.org/demo/gosched/</guid>
      <description>package main

import (
	&#34;fmt&#34;
	&#34;io/ioutil&#34;
	&#34;runtime&#34;
	&#34;sync&#34;
	&#34;time&#34;
)

func main() {
	runtime.GOMAXPROCS(1) // 如果是多核就不一定能看到调度的效果了
	wg := new(sync.WaitGroup)
	wg.Add(4)

	go func() {
		defer wg.Done()
		fmt.Println(&#34;start func alpha&#34;)
		runtime.Gosched()
		fmt.Println(&#34;done func alpha&#34;)

	}()

	//IO操作可能会导致go routiner 让出线程(strings或bytes的NewReader不会)
	go func() {
		defer wg.Done()
		fmt.</description>
    </item>
    
    <item>
      <title>go select</title>
      <link>https://bigpigeon.org/demo/goselect/</link>
      <pubDate>Sat, 16 Jan 2016 17:59:00 +0800</pubDate>
      
      <guid>https://bigpigeon.org/demo/goselect/</guid>
      <description>package main import ( &#34;fmt&#34; &#34;runtime&#34; &#34;sync&#34; &#34;time&#34; ) //测试select 加入default和不加default的区别 func test() { cA, cB := make(chan int), make(chan int) //为防止在go routines跑完前进程退出 wg := sync.WaitGroup{} wg.Add(3) go func() { defer wg.Done() cA </description>
    </item>
    
    <item>
      <title>go struct</title>
      <link>https://bigpigeon.org/demo/gostruct/</link>
      <pubDate>Sat, 16 Jan 2016 17:59:00 +0800</pubDate>
      
      <guid>https://bigpigeon.org/demo/gostruct/</guid>
      <description>package main

import (
	&#34;fmt&#34;
)

var testFuncs = []func(){
	//map取值返回的是值而非引用
	func() {
		passwd := map[int]struct {
			name     string
			password int
		}{
			1: {&#34;user1&#34;, 10},
			2: {&#34;user2&#34;, 20},
		}
		u1 := passwd[1]
		u1.password = 123
		fmt.Printf(&#34;user1: %v,%v\n&#34;, passwd[1], u1)</description>
    </item>
    
  </channel>
</rss>