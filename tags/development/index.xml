<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on bigpigeon</title>
    <link>/tags/development/</link>
    <description>Recent content in Development on bigpigeon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Wed, 12 Oct 2016 11:43:37 +0800</lastBuildDate>
    
	<atom:link href="/tags/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>从jekyll到hugo，搬运经验总结</title>
      <link>/post/jekyll-to-hugo/</link>
      <pubDate>Wed, 12 Oct 2016 11:43:37 +0800</pubDate>
      
      <guid>/post/jekyll-to-hugo/</guid>
      <description>&lt;p&gt;因为我对新技术的热爱和向往，我选择博客从jekyll换成hugo了，本来是想记录一下他们之间区别，搬运完才发现它们在功能上竟然是如此的相识,所以我只能讲jekyll如何搬运到hugo.&lt;/p&gt;

&lt;p&gt;hugo和jekyll一样也是静态页面框架，有着和jekyll相似文件结构和配置方法，不过hugo有着更快的生成速度和更好的markdown引擎，支持toml,yaml,json配置文件格式，hugo又从hexo中借鉴了不少特性,比如live reload。而且hugo是go开发的，模板语法中能找到go语言的影子，这也是我使用它的主要原因。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>react学习笔记</title>
      <link>/post/react-study/</link>
      <pubDate>Thu, 21 Apr 2016 10:43:00 +0800</pubDate>
      
      <guid>/post/react-study/</guid>
      <description>&lt;h3 id=&#34;jsx&#34;&gt;JSX&lt;/h3&gt;

&lt;p&gt;React可以使用的是独有的JSX语法,包围它的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签type值为text/babel&lt;/p&gt;

&lt;p&gt;那什么是JSX呢，JSX其实就是JS+XML,在JSX中JS和XML可以同时存在,举个简单例子:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a = &amp;lt;div class=&amp;quot;green&amp;quot;&amp;gt;my color is green&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在JSX中这样的写法是完全合法的,这个a可以当成是一个html的element使用&lt;/p&gt;

&lt;p&gt;也可以使用react.createElement创建element&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var app = React.createElement(
    &amp;quot;div&amp;quot;, //标签名或组件对象
    {class:&amp;quot;green&amp;quot;}, //元素属性集
    &amp;quot;my color is green&amp;quot; //子元素
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;createElement的更多信息&lt;a href=&#34;https://facebook.github.io/react/docs/top-level-api.html#react.createelement&#34;&gt;看这里&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;hugomore42&#34;&gt;&lt;/h2&gt;

&lt;p&gt;于是乎，我们可以自由组合js和xml了，比如&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>postgresql类型</title>
      <link>/post/postgresql-type/</link>
      <pubDate>Sun, 13 Mar 2016 10:30:00 +0800</pubDate>
      
      <guid>/post/postgresql-type/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;postgresql支持的类型相当的多,配合postgresql的函数就已经可以满足很多业务的需求了&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;但是繁多的类型也导致了postgresql的学习成本和复杂度的问题&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;这里我来做个笔记简单讲讲postgresql的数据类型有哪些和如何用好这些类型&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PS:以下内容都基于postgresql 9.3&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;TODO:有些类型的例子和介绍还没写完，以后再补上&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在python上操作postgresql</title>
      <link>/post/python-and-postgresql/</link>
      <pubDate>Mon, 07 Mar 2016 10:30:00 +0800</pubDate>
      
      <guid>/post/python-and-postgresql/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本文使用的是postgresql 9.3 基于docker ubuntu&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;首先postgresql的安装,这里我使用了自己build一个Dockerfile&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;我的Dockerfile:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gin框架介绍</title>
      <link>/post/gin-framework/</link>
      <pubDate>Thu, 24 Dec 2015 06:25:00 +0800</pubDate>
      
      <guid>/post/gin-framework/</guid>
      <description>&lt;h3 id=&#34;为何用gin&#34;&gt;为何用gin&lt;/h3&gt;

&lt;p&gt;它是一个轻量级框架，框架简单而且速度很快，它的功能用来做rust api开发已经足够&lt;/p&gt;

&lt;p&gt;而因为它的简单我们也能很好的在它上面增加功能或再开发&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>